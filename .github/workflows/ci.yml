name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, self-hosted]
        python-version: [3.12]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root
      - name: Lint with ruff
        run: |
          poetry run ruff check .
      - name: Format check with black
        run: |
          poetry run black --check .
      - name: Type check with mypy
        run: |
          poetry run mypy .

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, self-hosted]
        python-version: [3.12]
        use_trade_v3: [false, true]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root
      - name: Test with pytest
        env:
          USE_TRADE_V3: ${{ matrix.use_trade_v3 }}
        run: |
          poetry run pytest --cov=src --cov-report=xml --cov-report=term --cov-branch --cov-fail-under=85
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.GITHUB_TOKEN }}

  integration-sim:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15        # Sim API に遅延があってもタイムアウトで fail
    env:
      SIM_CLIENT_ID: ${{ secrets.SIM_CLIENT_ID }}
      SIM_CLIENT_SECRET: ${{ secrets.SIM_CLIENT_SECRET }}
      SIM_ACCOUNT_KEY: ${{ secrets.SIM_ACCOUNT_KEY }}
      SIM_REFRESH_TOKEN: ${{ secrets.SIM_REFRESH_TOKEN }}
      USE_TRADE_V3: "true"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - name: Set up Docker Buildx (installs docker compose v2)
        uses: docker/setup-buildx-action@v3
      - name: Install deps
        run: |
          pip install poetry
          poetry install --no-root
      - name: Show which secret is missing (debug)
        run: |
          for v in SIM_CLIENT_ID SIM_CLIENT_SECRET SIM_ACCOUNT_KEY SIM_REFRESH_TOKEN; do
            if [ -z "${!v}" ]; then
              echo "::warning::$v is NOT set"
            else
              echo "$v looks set (length=${#v})"
            fi
          done
      # Removed duplicate debug step as requested
      - name: Verify SIM secrets
        shell: bash
        run: |
          for v in SIM_CLIENT_ID SIM_CLIENT_SECRET SIM_ACCOUNT_KEY SIM_REFRESH_TOKEN; do
            if [ -z "${!v:-}" ]; then
              echo "::error::$v is not set or empty"
              exit 1
            fi
          done
      - name: Create .env.sim file
        run: |
          mkdir -p docker
          cat > docker/.env.sim << EOF
          SIM_CLIENT_ID=${SIM_CLIENT_ID}
          SIM_CLIENT_SECRET=${SIM_CLIENT_SECRET}
          SIM_REFRESH_TOKEN=${SIM_REFRESH_TOKEN}
          SIM_ACCOUNT_KEY=${SIM_ACCOUNT_KEY}
          USE_TRADE_V3=true
          EOF
      - name: Spin up stack
        run: |
          docker compose -f docker/docker-compose.sim.yml up -d
          # healthz が上がるまで最大 30 秒待機
          for i in {1..30}; do
            curl -fs http://localhost:8000/healthz && break
            sleep 1
          done
      - name: Run canary trade & assert Filled
        run: |
          # Use docker compose run instead of docker cp + exec
          # Pass environment variables directly since --env-file is not supported
          docker compose -f docker/docker-compose.sim.yml run --rm \
            -v $(pwd)/tests:/tests \
            -v $(pwd)/src:/src \
            -v $(pwd)/pyproject.toml:/pyproject.toml \
            -v $(pwd)/conftest.py:/conftest.py \
            -e SIM_CLIENT_ID=${SIM_CLIENT_ID} \
            -e SIM_CLIENT_SECRET=${SIM_CLIENT_SECRET} \
            -e SIM_REFRESH_TOKEN=${SIM_REFRESH_TOKEN} \
            -e SIM_ACCOUNT_KEY=${SIM_ACCOUNT_KEY} \
            -e USE_TRADE_V3=true \
            parent_core bash -c "pip install pytest pytest-cov requests prometheus-client && \
                               python -m pytest /tests/integration/test_sim_canary.py -v --wait-filled=60"
      - name: Collect logs on failure
        if: failure()
        run: |
          docker compose -f docker/docker-compose.sim.yml logs > logs/compose.log
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sim-canary-logs
          path: logs/

  docker-build:
    needs: integration-sim
    runs-on: ubuntu-latest
    env:
      TAG: ${{ github.sha }}     # ← イメージタグを注入
    steps:
      - uses: actions/checkout@v4
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Compose build (sim)
        run: docker compose -f docker/docker-compose.sim.yml build
